"""
Django settings for sixsense project.

Generated by 'django-admin startproject' using Django 3.0.7.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""

import os
from datetime import timedelta, datetime
import pytz
from pydoc import locate

import environ

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/

# Load operating system environment variables and then prepare to use them
env = environ.Env()

# .env file, should load only in development environment
if env.bool("DJANGO_READ_DOT_ENV_FILE", default=False):
    env_file = str(os.path.join(BASE_DIR, ".env"))
    if os.path.exists(env_file):
        env.read_env(env_file)

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env("DJANGO_SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
# DEBUG = True
DEBUG = env.get_value("DEBUG", cast=bool, default=True)

ALLOWED_HOSTS = env.list("ALLOWED_HOSTS")


# Application definition

DJANGO_ADMIN_APP = "django.contrib.admin"
DJANGO_AUTH_APP = "django.contrib.auth"
DJANGO_CONTENTTYPES_APP = "django.contrib.contenttypes"
DJANGO_SESSIONS_APP = "django.contrib.sessions"
DJANGO_MESSAGES_APP = "django.contrib.messages"
DJANGO_STATICFILES_APP = "django.contrib.staticfiles"
DJANGO_GIS_APP = "django.contrib.gis"
TENANT_APP = "django_tenants"
USER_AUTH_APP = "apps.user_auth"
USERS_APP = "apps.users"
CLASSIF_AI_APP = "apps.classif_ai"
SUBSCRIPTIONS_APP = "apps.subscriptions"
ORGANIZATION_APP = "apps.organization"
PACKS_APP = "apps.packs"
CORSHEADERS_APP = "corsheaders"
DRF_SPECTACULAR_APP = "drf_spectacular"
DRF_APP = "rest_framework"
NOTIFICATION_APP = "apps.notifications"
CELERY_RESULTS = "django_celery_results"


SHARED_APPS = (
    TENANT_APP,
    ORGANIZATION_APP,
    DJANGO_ADMIN_APP,
    DJANGO_AUTH_APP,
    DJANGO_CONTENTTYPES_APP,
    DJANGO_SESSIONS_APP,
    DJANGO_MESSAGES_APP,
    DJANGO_STATICFILES_APP,
    USER_AUTH_APP,
)

TENANT_APPS = (
    TENANT_APP,
    DJANGO_ADMIN_APP,
    DJANGO_AUTH_APP,
    DJANGO_CONTENTTYPES_APP,
    DJANGO_SESSIONS_APP,
    DJANGO_MESSAGES_APP,
    DJANGO_STATICFILES_APP,
    DJANGO_GIS_APP,
    DRF_APP,
    CORSHEADERS_APP,
    DRF_SPECTACULAR_APP,
    USER_AUTH_APP,
    USERS_APP,
    PACKS_APP,
    SUBSCRIPTIONS_APP,
    CLASSIF_AI_APP,
    NOTIFICATION_APP,
    CELERY_RESULTS,
)

DJANGO_APPS = [
    TENANT_APP,
    ORGANIZATION_APP,
    DJANGO_ADMIN_APP,
    DJANGO_AUTH_APP,
    DJANGO_CONTENTTYPES_APP,
    DJANGO_SESSIONS_APP,
    DJANGO_MESSAGES_APP,
    DJANGO_STATICFILES_APP,
    DJANGO_GIS_APP,
    DRF_APP,
    CORSHEADERS_APP,
    DRF_SPECTACULAR_APP,
    "phonenumber_field",
    CELERY_RESULTS,
]

PROJECT_APPS = [USER_AUTH_APP, USERS_APP, PACKS_APP, SUBSCRIPTIONS_APP, CLASSIF_AI_APP, "common", NOTIFICATION_APP]

INSTALLED_APPS = DJANGO_APPS + PROJECT_APPS

TENANT_MODEL = "organization.Organization"
TENANT_DOMAIN_MODEL = "organization.OrganizationDomain"

MIDDLEWARE = [
    "common.middleware.HealthCheckMiddleware",
    "django_tenants.middleware.main.TenantMainMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "sixsense.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

TEMPLATE_CONTEXT_PROCESSORS = ("django.core.context_processors.request",)

WSGI_APPLICATION = "sixsense.wsgi.application"

PUBLIC_SCHEMA_NAME = env.get_value("PUBLIC_SCHEMA_NAME", default="public")


# Database
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django_tenants.postgresql_backend",
        "NAME": env("DB_NAME"),
        "USER": env("DB_USER"),
        "PASSWORD": env("DB_PASSWORD"),
        "HOST": env("DB_HOST"),
        "PORT": env("DB_PORT"),
    }
}

ORIGINAL_BACKEND = "django.contrib.gis.db.backends.postgis"

DATABASE_ROUTERS = ("django_tenants.routers.TenantSyncRouter",)

AUTH_USER_MODEL = "user_auth.User"

AUTHENTICATION_BACKENDS = ("apps.user_auth.auth_backends.EmailMobileAuthentication",)

DEFAULT_AUTO_FIELD = "django.db.models.AutoField"

# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# logger settings
LOG_DIR = os.path.join(BASE_DIR, "logs")
if not os.path.exists(LOG_DIR):
    os.makedirs(LOG_DIR)
LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "standard": {
            "format": "[%(process)d %(thread)d %(asctime)s] %(levelname)s [%(name)s:%(lineno)s] %(message)s",
            "datefmt": "%d/%b/%Y %H:%M:%S",
        },
    },
    "filters": {
        "require_debug_true": {
            "()": "django.utils.log.RequireDebugTrue",
        }
    },
    "handlers": {
        "logfile": {
            "level": "DEBUG",
            "class": "logging.handlers.RotatingFileHandler",
            "filename": os.path.abspath(os.path.join(LOG_DIR, "app.log")),
            "maxBytes": 1024 * 1024 * 20,
            "backupCount": 50,
            "formatter": "standard",
        },
        "console": {
            "level": "DEBUG",
            "filters": ["require_debug_true"],
            "class": "logging.StreamHandler",
            # 'level': 'INFO',
            # 'class': 'logging.StreamHandler',
            # 'formatter': 'standard'
        },
    },
    "loggers": {
        "django": {
            "handlers": ["console", "logfile"],
            "propagate": True,
            "level": "WARN",
        },
        "django.server": {"handlers": ["console", "logfile"], "level": "DEBUG"},
        # 'django.db.backends': {
        #     'handlers': ['console', 'logfile'],
        #     'level': 'DEBUG',
        #     'propagate': False,
        # },
        "main": {
            "handlers": ["console", "logfile"],
            "level": "DEBUG",
        },
        "apps": {
            "handlers": ["logfile", "console"],
            "level": "DEBUG",
        },
    },
}

# rest_framework settings
REST_FRAMEWORK = {
    "DEFAULT_PERMISSION_CLASSES": ("rest_framework.permissions.IsAuthenticated",),
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework_simplejwt.authentication.JWTAuthentication",
        "rest_framework.authentication.SessionAuthentication",
        "rest_framework.authentication.BasicAuthentication",
    ),
    "DEFAULT_PARSER_CLASSES": (
        # If you use MultiPartFormParser or FormParser, we also have a camel case version
        "djangorestframework_camel_case.parser.CamelCaseFormParser",
        "djangorestframework_camel_case.parser.CamelCaseMultiPartParser",
        "djangorestframework_camel_case.parser.CamelCaseJSONParser",
        # Any other parsers
    ),
    "DEFAULT_PAGINATION_CLASS": "common.pagination.LimitOffsetPagination",
    "DEFAULT_SCHEMA_CLASS": "drf_spectacular.openapi.AutoSchema",
    "PAGE_SIZE": 100,
}

# JWT settings
SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(
        minutes=env.get_value("ACCESS_TOKEN_LIFETIME_IN_MINUTES", default=15, cast=int)
    ),
    "REFRESH_TOKEN_LIFETIME": timedelta(hours=env.get_value("ACCESS_TOKEN_LIFETIME_IN_HOURS", default=24, cast=int)),
}

# cors settings
CORS_ORIGIN_ALLOW_ALL = True


# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/

STATIC_ROOT = os.path.join(BASE_DIR, "static")
STATIC_URL = env.get_value("STATIC_URL", default="/api/static/")

MEDIA_ROOT = env.get_value("MEDIA_ROOT", default=os.path.join(BASE_DIR, "media"))
MEDIA_URL = env.get_value("MEDIA_URL", default="/media/")

DEFAULT_FILE_STORAGE = env.get_value("DEFAULT_FILE_STORAGE", default="common.file_storage.TenantFileSystemS3Storage")
AWS_STORAGE_BUCKET_NAME = env("AWS_STORAGE_BUCKET_NAME")
AWS_DEFAULT_ACL = None
AWS_ACCESS_KEY_ID = env.get_value("AWS_ACCESS_KEY_ID", default=None)
AWS_SECRET_ACCESS_KEY = env.get_value("AWS_SECRET_ACCESS_KEY", default=None)
DEFAULT_FILE_STORAGE_OBJECT = locate(DEFAULT_FILE_STORAGE)()
CUSTOM_MODELS_PATH = env.get_value("CUSTOM_MODELS_PATH", default="all_models")
CELERY_BROKER_URL = env("CELERY_BROKER_URL", default=None)
CELERY_TASK_DEFAULT_QUEUE = env("CELERY_TASK_DEFAULT_QUEUE", default=None)
DS_MODEL_INVOCATION_PATH = env("DS_MODEL_INVOCATION_PATH", default="/")
GF_DS_MODEL_INVOCATION_PATH = env.get_value("GF_DS_MODEL_INVOCATION_PATH", default="/")
STM_DS_MODEL_INVOCATION_PATH = env.get_value("STM_DS_MODEL_INVOCATION_PATH", default="/")
SKYWORKS_DS_MODEL_INVOCATION_PATH = env.get_value("SKYWORKS_DS_MODEL_INVOCATION_PATH", default="/")
GF7_DATA_PREP_PATH = env.get_value("GF7_DATA_PREP_PATH", default="/")
TENANT_FILE_STORAGE = env.get_value("TENANT_FILE_STORAGE", default="S3")
INFERENCE_QUEUE = env.get_value("INFERENCE_QUEUE", default="inference_development")
INFERENCE_QUEUE_REGION = env.get_value("INFERENCE_QUEUE_REGION", default="ap-southeast-1")
RETRAINING_QUEUE = env.get_value("RETRAINING_QUEUE", default="retraining_development")
RETRAINING_QUEUE_REGION_NAME = env.get_value("RETRAINING_QUEUE_REGION_NAME", default="ap-southeast-1")
BOTTOM_LEAD_INFERENCE_LINK = env.get_value("BOTTOM_LEAD_INFERENCE_LINK", default="")
PROJECT_START_DATE = env.get_value("PROJECT_START_DATE", default="2020-07-30")
PROJECT_START_DATE = datetime(*list(map(int, (PROJECT_START_DATE.split("-")))), tzinfo=pytz.UTC)
FILE_UPLOAD_PERMISSIONS = 0o644
HEATMAP_URL = env.get_value("HEATMAP_URL", default=None)
LEAD_POSITION_URL = env.get_value("LEAD_POSITION_URL", default=None)
WAFERMAP_PLOTTING_URL = env.get_value("WAFERMAP_PLOTTING_URL", default=None)
IMAGE_HANDLER_QUEUE_REGION_NAME = env("IMAGE_HANDLER_QUEUE_REGION_NAME", default=None)
IMAGE_HANDLER_QUEUE_URL = env("IMAGE_HANDLER_QUEUE_URL", default=None)
INFERENCE_METHOD = env.get_value("INFERENCE_METHOD", default=None)
CELERY_RESULT_BACKEND = env.get_value("CELERY_RESULT_BACKEND", default=None)


if env.get_value("GDAL_LIBRARY_PATH", default=None):
    GDAL_LIBRARY_PATH = env("GDAL_LIBRARY_PATH")
if env.get_value("GEOS_LIBRARY_PATH", default=None):
    GEOS_LIBRARY_PATH = env("GEOS_LIBRARY_PATH")
